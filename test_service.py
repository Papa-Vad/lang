"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
"""

import json
import requests
import time
import sys
import os
from typing import List, Dict, Any
from dataclasses import dataclass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Docker
SERVICE_URL = os.getenv('SERVICE_URL', 'http://localhost:8978')
MAX_WAIT_ATTEMPTS = int(os.getenv('MAX_WAIT_ATTEMPTS', '30'))
WAIT_DELAY = float(os.getenv('WAIT_DELAY', '2.0'))
TEST_CASES_FILE = os.getenv('TEST_CASES_FILE', 'demo_test_cases.json')


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
    test_case_id: int
    text: str
    expected: List[Dict[str, Any]]
    actual: List[Dict[str, Any]]
    passed: bool
    errors: List[str]


class ServiceTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self, service_url: str = SERVICE_URL):
        self.service_url = service_url
        self.test_cases = []
        self.results = []
    
    def load_test_cases(self, file_path: str = TEST_CASES_FILE):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                self.test_cases = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.test_cases)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏–∑ {file_path}")
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            possible_paths = [
                '/app/' + file_path,
                './' + file_path,
                '/tests/' + file_path
            ]
            for path in possible_paths:
                try:
                    with open(path, 'r', encoding='utf-8') as f:
                        self.test_cases = json.load(f)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.test_cases)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏–∑ {path}")
                    break
                except FileNotFoundError:
                    continue
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å–ª—É—á–∞—è–º–∏")
                sys.exit(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
            sys.exit(1)
    
    def wait_for_service(self, max_attempts: int = MAX_WAIT_ATTEMPTS, delay: float = WAIT_DELAY):
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ {self.service_url}...")
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{self.service_url}/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
                else:
                    print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª {response.status_code}")
            except requests.exceptions.ConnectionError:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∂–¥–µ–º...")
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
            
            time.sleep(delay)
        
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def normalize_law_link(self, link: Dict[str, Any]) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        return {
            'law_id': link.get('law_id'),
            'article': link.get('article'),
            'point_article': link.get('point_article'),
            'subpoint_article': link.get('subpoint_article')
        }
    
    def compare_links(self, expected: List[Dict], actual: List[Dict]) -> tuple[bool, List[str]]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        errors = []
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫–∏
        expected_norm = [self.normalize_law_link(link) for link in expected]
        actual_norm = [self.normalize_law_link(link) for link in actual]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        if len(expected_norm) != len(actual_norm):
            errors.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: –æ–∂–∏–¥–∞–ª–æ—Å—å {len(expected_norm)}, –ø–æ–ª—É—á–µ–Ω–æ {len(actual_norm)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –æ–∂–∏–¥–∞–µ–º—É—é —Å—Å—ã–ª–∫—É
        for i, expected_link in enumerate(expected_norm):
            if expected_link not in actual_norm:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ {i+1}: {expected_link}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        for i, actual_link in enumerate(actual_norm):
            if actual_link not in expected_norm:
                errors.append(f"–õ–∏—à–Ω—è—è —Å—Å—ã–ª–∫–∞ {i+1}: {actual_link}")
        
        return len(errors) == 0, errors
    
    def test_single_case(self, test_case_id: int, text: str, expected: List[Dict]) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É
            response = requests.post(
                f"{self.service_url}/detect",
                json={"text": text},
                timeout=30
            )
            
            if response.status_code != 200:
                return TestResult(
                    test_case_id=test_case_id,
                    text=text,
                    expected=expected,
                    actual=[],
                    passed=False,
                    errors=[f"HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}"]
                )
            
            actual = response.json()["links"]
            passed, errors = self.compare_links(expected, actual)
            
            return TestResult(
                test_case_id=test_case_id,
                text=text,
                expected=expected,
                actual=actual,
                passed=passed,
                errors=errors
            )
            
        except Exception as e:
            return TestResult(
                test_case_id=test_case_id,
                text=text,
                expected=expected,
                actual=[],
                passed=False,
                errors=[f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"]
            )
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(self.test_cases)} —Å–ª—É—á–∞–µ–≤...")
        
        for i, test_case in enumerate(self.test_cases):
            print(f"\nüìã –¢–µ—Å—Ç {i+1}/{len(self.test_cases)}")
            print(f"–¢–µ–∫—Å—Ç: {test_case['text'][:100]}...")
            
            result = self.test_single_case(
                test_case_id=i+1,
                text=test_case['text'],
                expected=test_case['test_cases']
            )
            
            self.results.append(result)
            
            if result.passed:
                print("‚úÖ –ü–†–û–ô–î–ï–ù")
            else:
                print("‚ùå –ü–†–û–í–ê–õ–ï–ù")
                for error in result.errors:
                    print(f"   –û—à–∏–±–∫–∞: {error}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r.passed)
        failed_tests = total_tests - passed_tests
        
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        success_rate = (passed_tests/total_tests)*100 if total_tests > 0 else 0
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if failed_tests > 0:
            print(f"\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            print("-" * 40)
            for result in self.results:
                if not result.passed:
                    print(f"\n–¢–µ—Å—Ç {result.test_case_id}:")
                    print(f"–¢–µ–∫—Å—Ç: {result.text[:150]}...")
                    print("–û—à–∏–±–∫–∏:")
                    for error in result.errors:
                        print(f"  - {error}")
                    print("–û–∂–∏–¥–∞–ª–æ—Å—å:")
                    for link in result.expected:
                        print(f"  - {link}")
                    print("–ü–æ–ª—É—á–µ–Ω–æ:")
                    for link in result.actual:
                        print(f"  - {link}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_data = {
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "success_rate": success_rate
            },
            "results": [
                {
                    "test_case_id": r.test_case_id,
                    "passed": r.passed,
                    "errors": r.errors,
                    "expected": r.expected,
                    "actual": r.actual,
                    "text": r.text
                }
                for r in self.results
            ]
        }
        
        with open("test_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return passed_tests == total_tests


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫")
    print("=" * 60)
    
    tester = ServiceTester()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    tester.load_test_cases()
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
    if not tester.wait_for_service():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = tester.generate_report()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    sys.exit(0 if all_passed else 1)


if __name__ == "__main__":
    main()